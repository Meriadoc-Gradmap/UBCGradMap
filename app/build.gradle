/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "org.springframework.boot" version "3.3.5"
    id "io.spring.dependency-management" version "1.1.6"
    id 'jacoco'
    id 'org.barfuin.gradle.jacocolog' version '3.1.0'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava

    // Springboot API
    implementation group: "org.springframework.boot", name: "spring-boot-starter-web", version: "3.3.5"
    implementation group: "org.springframework.boot", name: "spring-boot-starter-test", version: "3.3.5"

    // google gson for java json convertion
    implementation 'com.google.code.gson:gson:2.11.0'

    // Jsoup for Web Scraping
    implementation 'org.jsoup:jsoup:1.18.1'

    implementation 'me.tongfei:progressbar:0.10.1'

    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


test {
    // Use JUnit Platform for unit tests.
    jvmArgs '-Xmx2g', '-Xms1g' // increase mem size
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}


jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/graphapi/G**",
                    "**.main**"
            ])
        }))
    }

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    finalizedBy(jacocoTestCoverageVerification)

}

jacocoTestCoverageVerification{

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/graphapi/G**",
                    "**.main**"
            ])
        }))
    }

    violationRules {
        rule {
            limit {
                minimum = 0.0 // TODO Raise once tests start being put it
            }
        }
    }
}

application {
    mainClass = 'org.graphapi.GraphApi'
}

tasks.register('runScraperNoCache', JavaExec) {
//    group = "Execution"
//    classpath = sourceSets.main.runtimeClasspath
//    main = 'org.datacollection.DataFormatter'
//    args ""
    mainClass = 'org.datacollection.DataFormatter'
    classpath = sourceSets.main.runtimeClasspath

    systemProperties System.getProperties()
}